<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qf.suselibrary.dao.BorrowCardDao">

    <resultMap type="com.qf.suselibrary.entity.BorrowCard" id="BorrowCardMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="reader" column="reader" jdbcType="VARCHAR"/>
        <result property="ruleId" column="rule_id" jdbcType="INTEGER"/>
        <result property="status" column="status" jdbcType="INTEGER"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="BorrowCardMap">
        select id,
               password,
               reader,
               rule_id,
               status
        from borrow_card
        where id = #{id}
    </select>

    <select id="queryAll" resultType="com.qf.suselibrary.dto.BorrowCardDto">
        select borrow_card.id,
               password,
               reader,
               rule_id,
               status
        from borrow_card
                 limit #{page},#{limit}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BorrowCardMap">
        select
        id, password, reader, rule_id, status
        from borrow_card
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="password != null and password != ''">
                and password = #{password}
            </if>
            <if test="reader != null and reader != ''">
                and reader = #{reader}
            </if>
            <if test="ruleId != null">
                and rule_id = #{ruleId}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from borrow_card
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into borrow_card(password, reader, rule_id, status)
        values (#{password}, #{reader}, #{ruleId}, #{status})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into borrow_card(password, reader, rule_id, status)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.password}, #{entity.reader}, #{entity.ruleId}, #{entity.status})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into borrow_card(password, reader, rule_id, status)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.password}, #{entity.reader}, #{entity.ruleId}, #{entity.status})
        </foreach>
        on duplicate key update
        password = values(password),
        reader = values(reader),
        rule_id = values(rule_id),
        status = values(status)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update borrow_card
        <set>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="reader != null and reader != ''">
                reader = #{reader},
            </if>
            <if test="ruleId != null">
                rule_id = #{ruleId},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from borrow_card
        where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>


    <select id="queryPageByconditions" resultType="com.qf.suselibrary.dto.BorrowCardDto">

    select id,
    password,
    reader,
    rule_id,
    status
    from borrow_card
    <where>
        <if test="reader != null and reader!=''">
            borrow_card.reader=#{reader}
        </if>
    </where>
    limit #{page},#{limit}
    </select>

    <select id="queryByconditions" resultType="com.qf.suselibrary.dto.BorrowCardDto">
        select id,
               password,
               reader,
               rule_id,
               status
        from borrow_card where borrow_card.reader=#{reader}
    </select>

</mapper>

